// go get and dep ensure
// for golang.org/x/oauth2 and google.golang.org/api
// take long ass time to download
// so this file will stay un formatted


package util

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"

	"golang.org/x/oauth2"
	"golang.org/x/oauth2/google"
	"google.golang.org/api/drive/v3"
)

type GoogleDriveConfig struct {
	Config        *oauth2.Config
	TokenFilePath string
}

// Retrieve a token, saves the token, then returns the generated client.
func (g *GoogleDriveConfig) GetClient(ctx context.Context) (*http.Client, error) {
	client := &http.Client{}
	tok, err := tokenFromFile(g.TokenFilePat)
	if err != nil {
		return client, err
	}
	return config.Client(ctx, tok), nil
}

// get token from web
func (g *GoogleDriveConfig) GetTokenFromWeb() (*oauth2.Token, error) {
	token := &oauth2.Token{}
	authURL := config.AuthCodeURL("state-token", g.Config.AccessTypeOffline)

	var authCode string
	if _, errS := fmt.Scan(&authCode); errS != nil {
		return token, errS
	}

	tok, err := config.Exchange(context.TODO(), authCode)
	if err != nil {
		return token, err
	}

	return tok, nil
}

// Retrieves a token from a local file.
func (g *GoogleDriveConfig) TokenFromFile() (*oauth2.Token, error) {
	tok := &oauth2.Token{}
	f, err := os.Open(file)
	if err != nil {
		return tok, err
	}
	defer f.Close()

	err = json.NewDecoder(f).Decode(tok)
	if err != nil {
		return tok, err
	}
	return tok, nil
}

func (g *GoogleDriveConfig) SaveToken() error {
	f, err := os.OpenFile(path, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0600)
	if err != nil {
		return err
	}
	defer f.Close()

	err = json.NewEncoder(f).Encode(token)
	if err != nil {
		return err
	}

	return nil
}

func TestToken(path string) {

	ctx := context.Background()

	b, err := ioutil.ReadFile(path)
	if err != nil {
		log.Fatalf("Unable to read client secret file: %v", err)
	}

	// If modifying these scopes, delete your previously saved token.json.
	config, err := google.ConfigFromJSON(b, drive.DriveMetadataReadonlyScope)
	if err != nil {
		log.Fatalf("Unable to parse client secret file to config: %v", err)
	}

	g := &GoogleDriveConfig{
		Config:        config,
		TokenFilePath: path,
	}

	client, err := g.GetClient()
	if err != nil {
		log.Fatalf("Unable to retrieve client: %v", err)
	}

	srv, err := drive.New(client)
	if err != nil {
		log.Fatalf("Unable to retrieve Drive client: %v", err)
	}

	r, err := srv.Files.List().PageSize(10).
		Fields("nextPageToken, files(id, name)").Do()
	if err != nil {
		log.Fatalf("Unable to retrieve files: %v", err)
	}
	fmt.Println("Files:")
	if len(r.Files) == 0 {
		fmt.Println("No files found.")
	} else {
		for _, i := range r.Files {
			fmt.Printf("%s (%s)\n", i.Name, i.Id)
		}
	}
}
